name: Apply Terraform

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      env_deploy_list:
        type: string
        required: false
        default: '["dev"]'
      region:
        required: True
        type: string
      role_to_assume:
        type: string
        required: true
      tf_build_path:
        required: false
        type: string
        default: 'build'
      tf_deploy_path:
        required: false
        type: string
        default: 'deploy'
      tf_destroy_all_resources:
        required: False
        type: string
        default: False
      tf_dry_run:
        type: boolean
        required: false
        default: false
      tf_version:
        type: string
        required: false
        default: 1.3.9
      container_version:
        type: string
        required: false
        default: ''

jobs:
  Apply:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    concurrency: ${{ inputs.environment }}
    if: ${{ github.ref == 'refs/heads/main' || github.ref != 'refs/heads/main' && contains(fromJson(inputs.env_deploy_list), inputs.environment) }}
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.tf_version }}

    - name: Download Terraform Plan Artifact
      uses: actions/download-artifact@v3
      with:
        name: terraform-plan-${{ inputs.environment }}
        path: ${{ inputs.tf_build_path }}

    - name: Configure AWS credentials for account
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        role-to-assume: ${{ inputs.role_to_assume }}
        aws-region: ${{ inputs.region }}

    - name: Terraform version
      working-directory: ${{ inputs.tf_build_path }}
      run: 'terraform version'

    - name: Config Terraform plugin cache
      run: |
        echo 'plugin_cache_dir="$HOME/.terraform.d/plugin-cache"' >~/.terraformrc
        mkdir --parents ~/.terraform.d/plugin-cache

    - name: Cache Terraform Plugins
      uses: actions/cache@v3
      with:
        path: |
          ~/.terraform.d/plugin-cache
        key: ${{ runner.os }}-${{ inputs.environment }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
        restore-keys: |
          ${{ runner.os }}-${{ inputs.environment }}-terraform-

    - name: Cache Terraform Directory
      uses: actions/cache@v3
      with:
        path: |
          ${{ inputs.tf_build_path }}/.terraform
        key: ${{ runner.os }}-${{ inputs.environment }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}-${{ github.run_id }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      working-directory: ${{ inputs.tf_build_path }}
      run: |
        terraform init \
        -backend-config=${{ github.workspace }}/${{ inputs.tf_deploy_path }}/${{ inputs.environment }}/backend-${{ inputs.environment }}.conf \
        -lockfile=readonly \
        -reconfigure \
        -input=false
      env:
        GIT_SSH_COMMAND: "echo '${{ secrets.TF_MODULE_CHECKOUT_SSH_KEY }}' > id_rsa
        && ssh-keyscan github.com > known_hosts
        && chmod 600 id_rsa known_hosts
        && ssh -i ./id_rsa -o UserKnownHostsFile=./known_hosts"

    - name: Terraform File Permissions
      working-directory: ${{ inputs.tf_build_path }}
      run: pwd; ls -la ; sudo chmod -R 777 ./ ; sudo ls -la; env

    - name: Terraform apply
      if: ${{ inputs.tf_destroy_all_resources == 'False' && inputs.tf_dry_run == false }}
      working-directory: ${{ inputs.tf_build_path }}
      run: terraform apply tfplan
      env:
        AWS_REGION: "${{ inputs.region }}"
        TF_VAR_name_environment: "${{ inputs.environment }}"
        TF_VAR_container_version: "${{ inputs.container_version }}"

    - name: Terraform destroy
      if: ${{ inputs.tf_destroy_all_resources == 'True' && inputs.tf_dry_run == false }}
      working-directory: ${{ inputs.tf_build_path }}
      run: terraform apply tfplan
      env:
        AWS_REGION: "${{ inputs.region }}"


    - name: Set Job Summary
      if: ${{ inputs.container_version != '' }}
      run: |
        echo "### ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "Image Deployed: ${{ inputs.container_version }} :rocket:" >> $GITHUB_STEP_SUMMARY