on:
    workflow_call:
      inputs:
        json_path:
          type: string
          required: true
        env_deploy_list:
          type: string
          required: false
          default: '["dev"]'
      outputs:
        matrix:
          value: ${{ jobs.set-matrix.outputs.matrix }}
        env_deploy_list:
          value: ${{ jobs.set-matrix.outputs.env_deploy_list }}
  
jobs:
    set-matrix:
      # Don't run the Terraform actions on the first commit of the workflow on /main
      # This prevents unintended Terraform applies when the repo is cloned from a template repo
      if: ${{ github.ref != 'refs/heads/main' || !startsWith(github.event.head_commit.message, 'Initial commit') }}
      name: Environments
      runs-on: ubuntu-latest
      env:
        env_deploy_list: ${{ inputs.env_deploy_list }}
      outputs:
        matrix: ${{ steps.set-matrix.outputs.matrix }}
        env_deploy_list: ${{ steps.set-matrix.outputs.env_deploy_list }}
  
      steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
  
      - name: Setup Environments
        id: set-matrix
        run: |
          JSON1=$(cat ${{ inputs.json_path }})
          text=$(echo $JSON1 | tr '\n' ' ')
          echo "matrix=$text" >> $GITHUB_OUTPUT
          echo "env_deploy_list=$env_deploy_list" >> $GITHUB_OUTPUT
  
      # - name: Setup Environments
      #   id: set-matrix
      #   run: |
      #     JSON1=$(cat ${{ inputs.json_path }})
      #     JSON1="${JSON1//'%'/'%25'}"
      #     JSON1="${JSON1//$'\n'/'%0A'}"
      #     JSON1="${JSON1//$'\r'/'%0D'}"
      #     echo "::set-output name=matrix::${JSON1}"
      #     echo "::set-output name=env_deploy_list::$env_deploy_list"
  
      - name: Test Outputs
        run: |
          echo '${{ steps.set-matrix.outputs.matrix }}'
          echo ${{ steps.set-matrix.outputs.env_deploy_list }}
  