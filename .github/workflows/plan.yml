name: Plan Terraform

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      region:
        required: True
        type: string
      role_to_assume:
        type: string
        required: true
      tf_build_path:
        required: false
        type: string
        default: 'build'
      tf_deploy_path:
        required: false
        type: string
        default: 'deploy'
      tf_destroy_all_resources:
        required: False
        type: string
        default: False
      tf_version:
        type: string
        required: false
        default: 1.3.9
      container_version:
        type: string
        required: false
        default: ''

jobs:
  Plan:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.tf_version }}
  
    - name: Configure AWS credentials for account
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        role-to-assume: ${{ inputs.role_to_assume }}
        aws-region: ${{ inputs.region }}
    
    - name: Terraform version
      working-directory: ${{ inputs.tf_build_path }}
      run: 'terraform version'

    - name: Config Terraform plugin cache
      run: |
         echo 'plugin_cache_dir="$HOME/.terraform.d/plugin-cache"' >~/.terraformrc
         mkdir --parents ~/.terraform.d/plugin-cache

    - name: Cache Terraform Plugins
      uses: actions/cache@v3
      with:
       path: |
         ~/.terraform.d/plugin-cache
       key: ${{ runner.os }}-${{ inputs.environment }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
       restore-keys: |
         ${{ runner.os }}-${{ inputs.environment }}-terraform-

    - name: Cache Terraform Directory
      uses: actions/cache@v3
      with:
        path: |
          ${{ inputs.tf_build_path }}/.terraform
        key: ${{ runner.os }}-${{ inputs.environment }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}-${{ github.run_id }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      working-directory: ${{ inputs.tf_build_path }}
      run: |
        terraform init \
        -backend-config=${{ github.workspace }}/${{ inputs.tf_deploy_path }}/${{ inputs.environment }}/backend-${{ inputs.environment }}.conf \
        -reconfigure \
        -input=false
      env:
        GIT_SSH_COMMAND: "echo '${{ secrets.TF_MODULE_CHECKOUT_SSH_KEY }}' > id_rsa
          && ssh-keyscan github.com > known_hosts
          && chmod 600 id_rsa known_hosts
          && ssh -i ./id_rsa -o UserKnownHostsFile=./known_hosts"

    - name: Terraform File Permissions
      working-directory: ${{ inputs.tf_build_path }}
      run: pwd; ls -la ; sudo chmod -R 777 ./ ; sudo ls -la; env

    - name: Terraform plan (for Apply)
      if: ${{ inputs.tf_destroy_all_resources == 'False' }}
      id: plan
      working-directory: ${{ inputs.tf_build_path }}
      run: |
        terraform plan -no-color -input=false -out=tfplan \
        -var-file=${{ github.workspace }}/${{ inputs.tf_deploy_path }}/${{ inputs.environment }}/${{ inputs.environment }}.tfvars \
        && terraform show -no-color tfplan
      continue-on-error: true
      env:
        AWS_REGION: "${{ inputs.region }}"
        TF_VAR_name_environment: "${{ inputs.environment }}"
        TF_VAR_container_version: "${{ inputs.container_version }}"

      # Sed is taking all lines that begin with one or more spaces followed by a `+` or `-`.
      # It stores the amount of spaces in `\1` and the +/- in `\2`.
      # Then replace that portion of the line with `\2\1` (+/- followed by the number of matched spaces).
    - name: Reformat Plan (for Apply)
      if: ${{ inputs.tf_destroy_all_resources == 'False' }}
      run: |
        echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
        | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > tf_plan.txt

    - name: Terraform plan (for Destroy)
      if: ${{ inputs.tf_destroy_all_resources == 'True' }}
      id: plan_destroy
      working-directory: ${{ inputs.tf_build_path }}
      run: |
        terraform plan -destroy -no-color -input=false -out=tfplan \
        -var-file=${{ github.workspace }}/${{ inputs.tf_deploy_path }}/${{ inputs.environment }}/${{ inputs.environment }}.tfvars
      continue-on-error: true
      env:
        AWS_REGION: "${{ inputs.region }}"
        TF_VAR_name_environment: "${{ inputs.environment }}"

      # Sed is taking all lines that begin with one or more spaces followed by a `+` or `-`.
      # It stores the amount of spaces in `\1` and the +/- in `\2`.
      # Then replace that portion of the line with `\2\1` (+/- followed by the number of matched spaces).
    - name: Reformat Plan (for Destroy)
      if: ${{ inputs.tf_destroy_all_resources == 'True' }}
      run: |
        echo '${{ steps.plan_destroy.outputs.stdout || steps.plan_destroy.outputs.stderr }}' \
        | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > tf_plan.txt

    - name: Get Plan Output from file
      id: plan_output
      run: |
        cat tf_plan.txt

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Plan Destroy Status
      if: steps.plan_destroy.outcome == 'failure'
      run: exit 1

    - name: Publish Terraform Plan Artifact
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan-${{ inputs.environment }}
        path: ${{ inputs.tf_build_path }}/tfplan
